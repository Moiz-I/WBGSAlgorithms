Q2hvY29sYXRlIGhhcyBiZWVuIHByZXBhcmVkIGFzIGEgZHJpbmsgZm9yIG5lYXJseSBhbGwgb2YgaXRzIGhpc3RvcnkuIEZvciBleGFtcGxlLCBvbmUgdmVzc2VsIGZvdW5kIGF0IGFuIE9sbWVjIGFyY2hhZW9sb2dpY2FsIHNpdGUgb24gdGhlIEd1bGYgQ29hc3Qgb2YgVmVyYWNydXosIE1leGljbywgZGF0ZXMgY2hvY29sYXRlJ3MgcHJlcGFyYXRpb24gYnkgcHJlLU9sbWVjIHBlb3BsZXMgYXMgZWFybHkgYXMgMTc1MCBCQy5bN10gT24gdGhlIFBhY2lmaWMgY29hc3Qgb2YgQ2hpYXBhcywgTWV4aWNvLCBhIE1va2F5YSBhcmNoYWVvbG9naWNhbCBzaXRlIHByb3ZpZGVzIGV2aWRlbmNlIG9mIGNhY2FvIGJldmVyYWdlcyBkYXRpbmcgZXZlbiBlYXJsaWVyLCB0byAxOTAwIEJDLls4XVs3XSBUaGUgcmVzaWR1ZXMgYW5kIHRoZSBraW5kIG9mIHZlc3NlbCBpbiB3aGljaCB0aGV5IHdlcmUgZm91bmQgaW5kaWNhdGUgdGhlIGluaXRpYWwgdXNlIG9mIGNhY2FvIHdhcyBub3Qgc2ltcGx5IGFzIGEgYmV2ZXJhZ2UsIGJ1dCB0aGUgd2hpdGUgcHVscCBhcm91bmQgdGhlIGNhY2FvIGJlYW5zIHdhcyBsaWtlbHkgdXNlZCBhcyBhIHNvdXJjZSBvZiBmZXJtZW50YWJsZSBzdWdhcnMgZm9yIGFuIGFsY29ob2xpYyBkcmluay5bOV0K

Q2hvY29sYXRlIGlzIGEgcHJlcGFyYXRpb24gb2Ygcm9hc3RlZCBhbmQgZ3JvdW5kIGNhY2FvIHNlZWRzIHRoYXQgaXMgbWFkZSBpbiB0aGUgZm9ybSBvZiBhIGxpcXVpZCwgcGFzdGUsIG9yIGluIGEgYmxvY2ssIHdoaWNoIG1heSBhbHNvIGJlIHVzZWQgYXMgYSBmbGF2b3JpbmcgaW5ncmVkaWVudCBpbiBvdGhlciBmb29kcy4gVGhlIGVhcmxpZXN0IHNpZ25zIG9mIHVzZSBhcmUgYXNzb2NpYXRlZCB3aXRoIE9sbWVjIHNpdGVzICh3aXRoaW4gd2hhdCB3b3VsZCBiZWNvbWUgTWV4aWNv4oCZcyBwb3N0LWNvbG9uaWFsIHRlcnJpdG9yeSkgc3VnZ2VzdGluZyBjb25zdW1wdGlvbiBvZiBjaG9jb2xhdGUgYmV2ZXJhZ2VzLCBkYXRpbmcgZnJvbSAxOSBjZW50dXJpZXMgQkNFLlsxXVsyXSBUaGUgbWFqb3JpdHkgb2YgTWVzb2FtZXJpY2FuIHBlb3BsZSBtYWRlIGNob2NvbGF0ZSBiZXZlcmFnZXMsIGluY2x1ZGluZyB0aGUgTWF5YSBhbmQgQXp0ZWNzLlszXSBUaGUgd29yZCBjaG9jb2xhdGUgaXMgZGVyaXZlZCBmcm9tIHRoZSBTcGFuaXNoIHdvcmQgY2hvY29sYXRlLCBkZXJpdmluZyBpbiB0dXJuIGZyb20gdGhlIENsYXNzaWNhbCBOYWh1YXRsIHdvcmQgeG9jb2zEgXRsLls0XQoKVGhlIHNlZWRzIG9mIHRoZSBjYWNhbyB0cmVlIGhhdmUgYW4gaW50ZW5zZSBiaXR0ZXIgdGFzdGUgYW5kIG11c3QgYmUgZmVybWVudGVkIHRvIGRldmVsb3AgdGhlIGZsYXZvci4gQWZ0ZXIgZmVybWVudGF0aW9uLCB0aGUgYmVhbnMgYXJlIGRyaWVkLCBjbGVhbmVkLCBhbmQgcm9hc3RlZC4gVGhlIHNoZWxsIGlzIHJlbW92ZWQgdG8gcHJvZHVjZSBjYWNhbyBuaWJzLCB3aGljaCBhcmUgdGhlbiBncm91bmQgdG8gY29jb2EgbWFzcywgdW5hZHVsdGVyYXRlZCBjaG9jb2xhdGUgaW4gcm91Z2ggZm9ybS4gT25jZSB0aGUgY29jb2EgbWFzcyBpcyBsaXF1ZWZpZWQgYnkgaGVhdGluZywgaXQgaXMgY2FsbGVkIGNob2NvbGF0ZSBsaXF1b3IuIFRoZSBsaXF1b3IgbWF5IGFsc28gYmUgY29vbGVkIGFuZCBwcm9jZXNzZWQgaW50byBpdHMgdHdvIGNvbXBvbmVudHM6IGNvY29hIHNvbGlkcyBhbmQgY29jb2EgYnV0dGVyLiBCYWtpbmcgY2hvY29sYXRlLCBhbHNvIGNhbGxlZCBiaXR0ZXIgY2hvY29sYXRlLCBjb250YWlucyBjb2NvYSBzb2xpZHMgYW5kIGNvY29hIGJ1dHRlciBpbiB2YXJ5aW5nIHByb3BvcnRpb25zLCB3aXRob3V0IGFueSBhZGRlZCBzdWdhci4gUG93ZGVyZWQgYmFraW5nIGNvY29hLCB3aGljaCBjb250YWlucyBtb3JlIGZpYmVyIHRoYW4gY29jb2EgYnV0dGVyLCBjYW4gYmUgcHJvY2Vzc2VkIHdpdGggYWxrYWxpIHRvIHByb2R1Y2UgZHV0Y2ggY29jb2EuIE11Y2ggb2YgdGhlIGNob2NvbGF0ZSBjb25zdW1lZCB0b2RheSBpcyBpbiB0aGUgZm9ybSBvZiBzd2VldCBjaG9jb2xhdGUsIGEgY29tYmluYXRpb24gb2YgY29jb2Egc29saWRzLCBjb2NvYSBidXR0ZXIgb3IgYWRkZWQgdmVnZXRhYmxlIG9pbHMsIGFuZCBzdWdhci4gTWlsayBjaG9jb2xhdGUgaXMgc3dlZXQgY2hvY29sYXRlIHRoYXQgYWRkaXRpb25hbGx5IGNvbnRhaW5zIG1pbGsgcG93ZGVyIG9yIGNvbmRlbnNlZCBtaWxrLiBXaGl0ZSBjaG9jb2xhdGUgY29udGFpbnMgY29jb2EgYnV0dGVyLCBzdWdhciwgYW5kIG1pbGssIGJ1dCBubyBjb2NvYSBzb2xpZHMuCgpDaG9jb2xhdGUgaXMgb25lIG9mIHRoZSBtb3N0IHBvcHVsYXIgZm9vZCB0eXBlcyBhbmQgZmxhdm9ycyBpbiB0aGUgd29ybGQsIGFuZCBtYW55IGZvb2RzdHVmZnMgaW52b2x2aW5nIGNob2NvbGF0ZSBleGlzdCwgcGFydGljdWxhcmx5IGRlc3NlcnRzLCBpbmNsdWRpbmcgY2FrZXMsIHB1ZGRpbmcsIG1vdXNzZSwgY2hvY29sYXRlIGJyb3duaWVzLCBhbmQgY2hvY29sYXRlIGNoaXAgY29va2llcy4gTWFueSBjYW5kaWVzIGFyZSBmaWxsZWQgd2l0aCBvciBjb2F0ZWQgd2l0aCBzd2VldGVuZWQgY2hvY29sYXRlLiBDaG9jb2xhdGUgYmFycywgZWl0aGVyIG1hZGUgb2Ygc29saWQgY2hvY29sYXRlIG9yIG90aGVyIGluZ3JlZGllbnRzIGNvYXRlZCBpbiBjaG9jb2xhdGUsIGFyZSBlYXRlbiBhcyBzbmFja3MuIEdpZnRzIG9mIGNob2NvbGF0ZSBtb2xkZWQgaW50byBkaWZmZXJlbnQgc2hhcGVzIChzdWNoIGFzIGVnZ3MsIGhlYXJ0cywgY29pbnMpIGFyZSB0cmFkaXRpb25hbCBvbiBjZXJ0YWluIFdlc3Rlcm4gaG9saWRheXMsIGluY2x1ZGluZyBDaHJpc3RtYXMsIEVhc3RlciwgVmFsZW50aW5lJ3MgRGF5LCBhbmQgSGFudWtrYWguIENob2NvbGF0ZSBpcyBhbHNvIHVzZWQgaW4gY29sZCBhbmQgaG90IGJldmVyYWdlcywgc3VjaCBhcyBjaG9jb2xhdGUgbWlsayBhbmQgaG90IGNob2NvbGF0ZSwgYW5kIGluIHNvbWUgYWxjb2hvbGljIGRyaW5rcywgc3VjaCBhcyBjcmVtZSBkZSBjYWNhby4KCkFsdGhvdWdoIGNvY29hIG9yaWdpbmF0ZWQgaW4gdGhlIEFtZXJpY2FzLCBXZXN0IEFmcmljYW4gY291bnRyaWVzLCBwYXJ0aWN1bGFybHkgQ8O0dGUgZCdJdm9pcmUgYW5kIEdoYW5hLCBhcmUgdGhlIGxlYWRpbmcgcHJvZHVjZXJzIG9mIGNvY29hIGluIHRoZSAyMXN0IGNlbnR1cnksIGFjY291bnRpbmcgZm9yIHNvbWUgNjAlIG9mIHRoZSB3b3JsZCBjb2NvYSBzdXBwbHkuCgpXaXRoIHNvbWUgdHdvIG1pbGxpb24gY2hpbGRyZW4gaW52b2x2ZWQgaW4gdGhlIGZhcm1pbmcgb2YgY29jb2EgaW4gV2VzdCBBZnJpY2EsIGNoaWxkIHNsYXZlcnkgYW5kIHRyYWZmaWNraW5nIHdlcmUgbWFqb3IgY29uY2VybnMgaW4gMjAxOC5bNV1bNl0gSW50ZXJuYXRpb25hbCBhdHRlbXB0cyB0byBpbXByb3ZlIGNvbmRpdGlvbnMgZm9yIGNoaWxkcmVuIHdlcmUgZmFpbGluZyBiZWNhdXNlIG9mIHBlcnNpc3RlbnQgcG92ZXJ0eSwgYWJzZW5jZSBvZiBzY2hvb2xzLCBpbmNyZWFzaW5nIHdvcmxkIGNvY29hIGRlbWFuZCwgbW9yZSBpbnRlbnNpdmUgZmFybWluZyBvZiBjb2NvYSwgYW5kIGNvbnRpbnVlZCBleHBsb2l0YXRpb24gb2YgY2hpbGQgbGFib3IuWzVd





#1st one is alright, 2nd quite long, 3rd is very long. Can your implementation cope? You can use these to estimate the algorithm's time complexity. Find the length ratio between the two strings, and find the ratio between the time taken for each one, then use those.
